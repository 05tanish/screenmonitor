pipeline {
    agent any

    environment {
        PROJECT_DIR = 'app'
        BACKEND_PORT = '8002'
        FRONTEND_PORT = '3000'
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Repository') {
            steps {
                checkout scm
            }
        }

        stage('Verify Docker Setup') {
            steps {
                sh 'docker --version'
                sh 'docker-compose --version'
            }
        }

        stage('Build Containers') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker-compose build --no-cache'
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker-compose down --remove-orphans || true'
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Wait for Health Checks') {
            steps {
                dir("${PROJECT_DIR}") {
                    echo "Waiting for containers to become healthy..."
                    sh '''
                    sleep 10
                    until [ "$(docker inspect -f '{{.State.Health.Status}}' frontend_service)" == "healthy" ] && \
                          [ "$(docker inspect -f '{{.State.Health.Status}}' backend_service)" == "healthy" ]; do
                      echo "Waiting for containers..."
                      sleep 5
                    done
                    '''
                }
            }
        }

        stage('Test Services') {
            steps {
                script {
                    retry(3) {
                        sh "curl -f http://localhost:${FRONTEND_PORT} || exit 1"
                        sh "curl -f http://localhost:${BACKEND_PORT}/health || exit 1"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker container prune -f || true'
                    sh 'docker image prune -f || true'
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline executed successfully! All services are healthy."
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
        always {
            cleanWs()
        }
    }
}
