pipeline {
    agent any

    environment {
        PROJECT_DIR = 'app'
        BACKEND_PORT = '8002'
        FRONTEND_PORT = '3000'
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    echo "üßº Cleaning old workspace..."
                    cleanWs()
                }
            }
        }

        stage('Checkout Repository') {
            steps {
                script {
                    echo "üì¶ Checking out Git repository..."
                    checkout scm
                    echo "‚úÖ Checkout complete."
                }
            }
        }

        stage('Verify Docker Setup') {
            steps {
                script {
                    echo "üîç Verifying Docker environment..."
                    sh 'docker --version'
                    sh 'docker-compose --version'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                dir("${PROJECT_DIR}") {
                    script {
                        echo "‚öôÔ∏è Building frontend and backend images using docker-compose..."
                        sh 'docker-compose build'
                        echo "‚úÖ Build successful!"
                    }
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                dir("${PROJECT_DIR}") {
                    script {
                        echo "üöÄ Deploying containers..."
                        sh 'docker-compose down --remove-orphans || true'
                        sh 'docker-compose up -d'
                        echo "‚úÖ Containers are up!"
                    }
                }
            }
        }

        stage('Test Services') {
            steps {
                script {
                    echo "üß™ Running health checks..."
                    retry(3) {
                        sleep(5)
                        sh "curl -f http://localhost:${FRONTEND_PORT} || exit 1"
                        sh "curl -f http://localhost:${BACKEND_PORT} || exit 1"
                    }
                    echo "‚úÖ Both services are healthy!"
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up unused Docker resources..."
                    sh 'docker container prune -f || true'
                    sh 'docker image prune -f || true'
                    echo "‚úÖ Cleanup complete!"
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline finished successfully! Both frontend and backend are running."
        }
        failure {
            echo "‚ùå Pipeline failed. Please check the Jenkins logs."
        }
        always {
            echo "üèÅ Final workspace cleanup..."
            cleanWs()
        }
    }
}
